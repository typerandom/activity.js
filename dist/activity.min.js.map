{"version":3,"sources":["webpack:///activity.min.js","webpack:///webpack/bootstrap 30f574ce8486a0dfa50a?99e9","webpack:///./src/activity.js?9fea"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","Activity","options","emit","name","args","listeners","i","length","apply","transitionState","newState","force","currentState","State","Inactive","Active","inactiveSinceTick","inactiveSince","inactiveAfter","flagUserAsActive","clearTimeout","flagInactiveTimeoutId","flagUserAsInactive","setTimeout","onVisibilityChanged","document","hidden","addElementListener","element","listener","addEventListener","attachEvent","removeElementListener","removeEventListener","detachEvent","started","Unknown","inactiveSinceTimeoutId","defaultOptions","inactiveOnLostFocus","inactiveOnNoVisibility","inactiveOnMouseInactivity","inactiveOnKeyboardInactivity","key","value","start","setInterval","window","state","on","push","replayState","stop","resolveInstance","instance","Object","freeze","configure","detect","initialized","dispatchEvent","CustomEvent","_instance","Error"],"mappings":"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","file":"activity.min.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports) {\n\n\t// Activity.js\n\t// Know when your users are using your site.\n\t// Author: Robin Orheden\n\t// License: MIT\n\t\n\t(function () {\n\t  function Activity(options) {\n\t    var State = Activity.State;\n\t\n\t    var listeners = {};\n\t    var started = false;\n\t\n\t    var currentState = State.Unknown;\n\t\n\t    var inactiveSince = 0;\n\t    var inactiveSinceTimeoutId = null;\n\t    var flagInactiveTimeoutId = null;\n\t\n\t    // Setup options\n\t    if (!options) {\n\t      options = {};\n\t    }\n\t\n\t    var defaultOptions = {\n\t      inactiveAfter: 60,\n\t      inactiveOnLostFocus: true,\n\t      inactiveOnNoVisibility: true,\n\t      inactiveOnMouseInactivity: true,\n\t      inactiveOnKeyboardInactivity: true\n\t    };\n\t\n\t    // Iterate default options and fill in the gaps\n\t    // where there are options missing.\n\t    for (var key in defaultOptions) {\n\t      var value = defaultOptions[key];\n\t      if (!(key in options)) {\n\t        options[key] = value;\n\t      }\n\t    }\n\t\n\t    function emit(name, args) {\n\t      if (!args) {\n\t        args = [];\n\t      }\n\t      if (name in listeners) {\n\t        for (var i = 0; i < listeners[name].length; i++) {\n\t          listeners[name][i].apply(null, args);\n\t        }\n\t      }\n\t    }\n\t\n\t    function transitionState(newState, force) {\n\t      if (currentState !== newState || force === true) {\n\t        currentState = newState;\n\t        switch (currentState) {\n\t          case State.Inactive:\n\t            emit('inactive');\n\t            break;\n\t          case State.Active:\n\t            emit('active');\n\t            break;\n\t        }\n\t      }\n\t    }\n\t\n\t    function inactiveSinceTick() {\n\t      var newState = null;\n\t\n\t      if (++inactiveSince >= options.inactiveAfter) {\n\t        newState = State.Inactive;\n\t      } else {\n\t        newState = State.Active;\n\t      }\n\t\n\t      transitionState(newState);\n\t    }\n\t\n\t    function flagUserAsActive() {\n\t      inactiveSince = 0;\n\t      clearTimeout(flagInactiveTimeoutId);\n\t      transitionState(State.Active);\n\t    }\n\t\n\t    function flagUserAsInactive() {\n\t      clearTimeout(flagInactiveTimeoutId);\n\t      flagInactiveTimeoutId = setTimeout(function () {\n\t        transitionState(State.Inactive);\n\t      }, 50);\n\t    }\n\t\n\t    function onVisibilityChanged() {\n\t      if (document.hidden) {\n\t        flagUserAsActive();\n\t      } else {\n\t        transitionState(State.Inactive);\n\t      }\n\t    }\n\t\n\t    function addElementListener(element, name, listener) {\n\t      if (element.addEventListener) {\n\t        element.addEventListener(name, listener);\n\t      } else if (element.attachEvent) {\n\t        element.attachEvent(name, listener);\n\t      }\n\t    }\n\t\n\t    function removeElementListener(element, name, listener) {\n\t      if (element.removeEventListener) {\n\t        element.removeEventListener(name, listener);\n\t      } else if (element.detachEvent) {\n\t        element.detachEvent(name, listener);\n\t      }\n\t    }\n\t\n\t    return {\n\t      // Start monitoring user activity.\n\t      start: function start() {\n\t        if (started) {\n\t          return false;\n\t        }\n\t\n\t        started = true;\n\t        inactiveSinceTimeoutId = setInterval(inactiveSinceTick, 1 * 1000);\n\t        \n\t        if (options.inactiveOnMouseInactivity) {\n\t          addElementListener(window, 'mousemove', flagUserAsActive);\n\t        }\n\t\n\t        if (options.inactiveOnKeyboardInactivity) {\n\t          addElementListener(window, 'keypress', flagUserAsActive);\n\t        }\n\t\n\t        if (options.inactiveOnLostFocus) {\n\t          addElementListener(window, 'blur', flagUserAsInactive);\n\t          addElementListener(window, 'focus', flagUserAsActive);\n\t        }\n\t        \n\t        if (options.inactiveOnNoVisibility) {\n\t          addElementListener(document, 'visibilitychange', onVisibilityChanged);\n\t        }\n\t\n\t        emit('started');\n\t\n\t        return true;\n\t      },\n\t\n\t      // Get the current user state (see State for exactly what is available).\n\t      state: function state() {\n\t        return currentState;\n\t      },\n\t\n\t      // Listen to a event. Events currently supported:\n\t      // started: The service has started.\n\t      // stopped: The service has stopped.\n\t      // inactive: When a user is inactive.\n\t      // active: When a user is active.\n\t      on: function on(name, listener) {\n\t        if (!(name in listeners)) {\n\t          listeners[name] = [];\n\t        }\n\t        listeners[name].push(listener);\n\t      },\n\t\n\t      // Replays the current user state to all event listeners.\n\t      replayState: function replayState() {\n\t        transitionState(currentState, true);\n\t      },\n\t\n\t      // Stop monitoring user activity.\n\t      stop: function stop() {\n\t        if (!started) {\n\t          return false;\n\t        }\n\t\n\t        started = false;\n\t        currentState = State.Unknown;\n\t        clearTimeout(inactiveSinceTimeoutId);\n\t\n\t        if (options.inactiveOnMouseInactivity) {\n\t          removeElementListener(window, 'mousemove', flagUserAsActive);\n\t        }\n\t\n\t        if (options.inactiveOnKeyboardInactivity) {\n\t          removeElementListener(window, 'keypress', flagUserAsActive);\n\t        }\n\t\n\t        if (options.inactiveOnLostFocus) {\n\t          removeElementListener(window, 'blur', flagUserAsInactive);\n\t          removeElementListener(window, 'focus', flagUserAsActive);\n\t        };\n\t\n\t        if (options.inactiveOnNoVisibility) {\n\t          removeElementListener(document, 'visibilitychange', onVisibilityChanged);\n\t        }\n\t\n\t        emit('stopped');\n\t\n\t        return true;\n\t      }\n\t    };\n\t  };\n\t\n\t  // Expose state enum.\n\t  Activity.State = {\n\t    Unknown: 0,\n\t    Inactive: 1,\n\t    Active: 2\n\t  };\n\t\n\t  Object.freeze(Activity.State);\n\t\n\t  var instance = null;\n\t  function resolveInstance(options) {\n\t    return !instance ? instance = new Activity(options) : instance;\n\t  }\n\t\n\t  Activity.configure = function configure(options) {\n\t    return resolveInstance(options);\n\t  };\n\t\n\t  Activity.detect = function detect() {\n\t    var instance = resolveInstance();\n\t\n\t    if (instance.initialized) {\n\t      return true;\n\t    }\n\t\n\t    instance.initialized = true;\n\t\n\t    instance.on('inactive', function () {\n\t      window.dispatchEvent(new CustomEvent('user_inactive'));\n\t    });\n\t\n\t    instance.on('active', function () {\n\t      window.dispatchEvent(new CustomEvent('user_active'));\n\t    });\n\t\n\t    instance.start();\n\t\n\t    return true;\n\t  };\n\t\n\t  Activity.on = function on(name, listener) {\n\t    return resolveInstance().on(name, listener);\n\t  };\n\t\n\t  Activity.state = function state() {\n\t    return resolveInstance().state();\n\t  };\n\t\n\t  // Replays the current user state to all event listeners.\n\t  Activity.replayState = function replayState() {\n\t    var instance = Activity._instance;\n\t\n\t    if (!instance) {\n\t      throw new Error('Activity.detect() hasn\\'t been called.');\n\t    }\n\t\n\t    return instance.replayState();\n\t  };\n\t\n\t  window.Activity = Activity;\n\t})();\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** activity.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 30f574ce8486a0dfa50a\n **/","// Activity.js\n// Know when your users are using your site.\n// Author: Robin Orheden\n// License: MIT\n\n(function () {\n  function Activity(options) {\n    var State = Activity.State;\n\n    var listeners = {};\n    var started = false;\n\n    var currentState = State.Unknown;\n\n    var inactiveSince = 0;\n    var inactiveSinceTimeoutId = null;\n    var flagInactiveTimeoutId = null;\n\n    // Setup options\n    if (!options) {\n      options = {};\n    }\n\n    var defaultOptions = {\n      inactiveAfter: 60,\n      inactiveOnLostFocus: true,\n      inactiveOnNoVisibility: true,\n      inactiveOnMouseInactivity: true,\n      inactiveOnKeyboardInactivity: true\n    };\n\n    // Iterate default options and fill in the gaps\n    // where there are options missing.\n    for (var key in defaultOptions) {\n      var value = defaultOptions[key];\n      if (!(key in options)) {\n        options[key] = value;\n      }\n    }\n\n    function emit(name, args) {\n      if (!args) {\n        args = [];\n      }\n      if (name in listeners) {\n        for (var i = 0; i < listeners[name].length; i++) {\n          listeners[name][i].apply(null, args);\n        }\n      }\n    }\n\n    function transitionState(newState, force) {\n      if (currentState !== newState || force === true) {\n        currentState = newState;\n        switch (currentState) {\n          case State.Inactive:\n            emit('inactive');\n            break;\n          case State.Active:\n            emit('active');\n            break;\n        }\n      }\n    }\n\n    function inactiveSinceTick() {\n      var newState = null;\n\n      if (++inactiveSince >= options.inactiveAfter) {\n        newState = State.Inactive;\n      } else {\n        newState = State.Active;\n      }\n\n      transitionState(newState);\n    }\n\n    function flagUserAsActive() {\n      inactiveSince = 0;\n      clearTimeout(flagInactiveTimeoutId);\n      transitionState(State.Active);\n    }\n\n    function flagUserAsInactive() {\n      clearTimeout(flagInactiveTimeoutId);\n      flagInactiveTimeoutId = setTimeout(function () {\n        transitionState(State.Inactive);\n      }, 50);\n    }\n\n    function onVisibilityChanged() {\n      if (document.hidden) {\n        flagUserAsActive();\n      } else {\n        transitionState(State.Inactive);\n      }\n    }\n\n    function addElementListener(element, name, listener) {\n      if (element.addEventListener) {\n        element.addEventListener(name, listener);\n      } else if (element.attachEvent) {\n        element.attachEvent(name, listener);\n      }\n    }\n\n    function removeElementListener(element, name, listener) {\n      if (element.removeEventListener) {\n        element.removeEventListener(name, listener);\n      } else if (element.detachEvent) {\n        element.detachEvent(name, listener);\n      }\n    }\n\n    return {\n      // Start monitoring user activity.\n      start: function start() {\n        if (started) {\n          return false;\n        }\n\n        started = true;\n        inactiveSinceTimeoutId = setInterval(inactiveSinceTick, 1 * 1000);\n        \n        if (options.inactiveOnMouseInactivity) {\n          addElementListener(window, 'mousemove', flagUserAsActive);\n        }\n\n        if (options.inactiveOnKeyboardInactivity) {\n          addElementListener(window, 'keypress', flagUserAsActive);\n        }\n\n        if (options.inactiveOnLostFocus) {\n          addElementListener(window, 'blur', flagUserAsInactive);\n          addElementListener(window, 'focus', flagUserAsActive);\n        }\n        \n        if (options.inactiveOnNoVisibility) {\n          addElementListener(document, 'visibilitychange', onVisibilityChanged);\n        }\n\n        emit('started');\n\n        return true;\n      },\n\n      // Get the current user state (see State for exactly what is available).\n      state: function state() {\n        return currentState;\n      },\n\n      // Listen to a event. Events currently supported:\n      // started: The service has started.\n      // stopped: The service has stopped.\n      // inactive: When a user is inactive.\n      // active: When a user is active.\n      on: function on(name, listener) {\n        if (!(name in listeners)) {\n          listeners[name] = [];\n        }\n        listeners[name].push(listener);\n      },\n\n      // Replays the current user state to all event listeners.\n      replayState: function replayState() {\n        transitionState(currentState, true);\n      },\n\n      // Stop monitoring user activity.\n      stop: function stop() {\n        if (!started) {\n          return false;\n        }\n\n        started = false;\n        currentState = State.Unknown;\n        clearTimeout(inactiveSinceTimeoutId);\n\n        if (options.inactiveOnMouseInactivity) {\n          removeElementListener(window, 'mousemove', flagUserAsActive);\n        }\n\n        if (options.inactiveOnKeyboardInactivity) {\n          removeElementListener(window, 'keypress', flagUserAsActive);\n        }\n\n        if (options.inactiveOnLostFocus) {\n          removeElementListener(window, 'blur', flagUserAsInactive);\n          removeElementListener(window, 'focus', flagUserAsActive);\n        };\n\n        if (options.inactiveOnNoVisibility) {\n          removeElementListener(document, 'visibilitychange', onVisibilityChanged);\n        }\n\n        emit('stopped');\n\n        return true;\n      }\n    };\n  };\n\n  // Expose state enum.\n  Activity.State = {\n    Unknown: 0,\n    Inactive: 1,\n    Active: 2\n  };\n\n  Object.freeze(Activity.State);\n\n  var instance = null;\n  function resolveInstance(options) {\n    return !instance ? instance = new Activity(options) : instance;\n  }\n\n  Activity.configure = function configure(options) {\n    return resolveInstance(options);\n  };\n\n  Activity.detect = function detect() {\n    var instance = resolveInstance();\n\n    if (instance.initialized) {\n      return true;\n    }\n\n    instance.initialized = true;\n\n    instance.on('inactive', function () {\n      window.dispatchEvent(new CustomEvent('user_inactive'));\n    });\n\n    instance.on('active', function () {\n      window.dispatchEvent(new CustomEvent('user_active'));\n    });\n\n    instance.start();\n\n    return true;\n  };\n\n  Activity.on = function on(name, listener) {\n    return resolveInstance().on(name, listener);\n  };\n\n  Activity.state = function state() {\n    return resolveInstance().state();\n  };\n\n  // Replays the current user state to all event listeners.\n  Activity.replayState = function replayState() {\n    var instance = Activity._instance;\n\n    if (!instance) {\n      throw new Error('Activity.detect() hasn\\'t been called.');\n    }\n\n    return instance.replayState();\n  };\n\n  window.Activity = Activity;\n})();\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/activity.js\n ** module id = 0\n ** module chunks = 0 1\n **/"],"sourceRoot":""}