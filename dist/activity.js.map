{"version":3,"sources":["webpack:///webpack/bootstrap 063d83ed6d159f287fc4","webpack:///./src/activity.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wBAAuB,4BAA4B;AACnD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAO;AACP;;AAEA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,QAAO;;AAEP;AACA;AACA;AACA,QAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;;AAEP;AACA;AACA;AACA,QAAO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,EAAC,I","file":"activity.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 063d83ed6d159f287fc4\n **/","// Activity.js\n// Know when your users are using your site.\n// Author: Robin Orheden\n// License: MIT\n\n(function () {\n  function Activity(options) {\n    var State = Activity.State;\n\n    var listeners = {};\n    var started = false;\n\n    var currentState = State.Unknown;\n\n    var inactiveSince = 0;\n    var inactiveSinceTimeoutId = null;\n    var flagInactiveTimeoutId = null;\n\n    // Setup options\n    if (!options) {\n      options = {};\n    }\n\n    var defaultOptions = {\n      inactiveAfter: 60,\n      inactiveOnLostFocus: true,\n      inactiveOnNoVisibility: true,\n      inactiveOnMouseInactivity: true,\n      inactiveOnKeyboardInactivity: true\n    };\n\n    // Iterate default options and fill in the gaps\n    // where there are options missing.\n    for (var key in defaultOptions) {\n      var value = defaultOptions[key];\n      if (!(key in options)) {\n        options[key] = value;\n      }\n    }\n\n    function emit(name, args) {\n      if (!args) {\n        args = [];\n      }\n      if (name in listeners) {\n        for (var i = 0; i < listeners[name].length; i++) {\n          listeners[name][i].apply(null, args);\n        }\n      }\n    }\n\n    function transitionState(newState, force) {\n      if (currentState !== newState || force === true) {\n        currentState = newState;\n        switch (currentState) {\n          case State.Inactive:\n            emit('inactive');\n            break;\n          case State.Active:\n            emit('active');\n            break;\n        }\n      }\n    }\n\n    function inactiveSinceTick() {\n      var newState = null;\n\n      if (++inactiveSince >= options.inactiveAfter) {\n        newState = State.Inactive;\n      } else {\n        newState = State.Active;\n      }\n\n      transitionState(newState);\n    }\n\n    function flagUserAsActive() {\n      inactiveSince = 0;\n      clearTimeout(flagInactiveTimeoutId);\n      transitionState(State.Active);\n    }\n\n    function flagUserAsInactive() {\n      clearTimeout(flagInactiveTimeoutId);\n      flagInactiveTimeoutId = setTimeout(function () {\n        transitionState(State.Inactive);\n      }, 50);\n    }\n\n    function onVisibilityChanged() {\n      if (document.hidden) {\n        flagUserAsActive();\n      } else {\n        transitionState(State.Inactive);\n      }\n    }\n\n    function addElementListener(element, name, listener) {\n      if (element.addEventListener) {\n        element.addEventListener(name, listener);\n      } else if (element.attachEvent) {\n        element.attachEvent(name, listener);\n      }\n    }\n\n    function removeElementListener(element, name, listener) {\n      if (element.removeEventListener) {\n        element.removeEventListener(name, listener);\n      } else if (element.detachEvent) {\n        element.detachEvent(name, listener);\n      }\n    }\n\n    return {\n      // Start monitoring user activity.\n      start: function start() {\n        if (started) {\n          return false;\n        }\n\n        started = true;\n        inactiveSinceTimeoutId = setInterval(inactiveSinceTick, 1 * 1000);\n        \n        if (options.inactiveOnMouseInactivity) {\n          addElementListener(window, 'mousemove', flagUserAsActive);\n        }\n\n        if (options.inactiveOnKeyboardInactivity) {\n          addElementListener(window, 'keypress', flagUserAsActive);\n        }\n\n        if (options.inactiveOnLostFocus) {\n          addElementListener(window, 'blur', flagUserAsInactive);\n          addElementListener(window, 'focus', flagUserAsActive);\n        }\n        \n        if (options.inactiveOnNoVisibility) {\n          addElementListener(document, 'visibilitychange', onVisibilityChanged);\n        }\n\n        emit('started');\n\n        return true;\n      },\n\n      // Get the current user state (see State for exactly what is available).\n      state: function state() {\n        return currentState;\n      },\n\n      // Listen to a event. Events currently supported:\n      // started: The service has started.\n      // stopped: The service has stopped.\n      // inactive: When a user is inactive.\n      // active: When a user is active.\n      on: function on(name, listener) {\n        if (!(name in listeners)) {\n          listeners[name] = [];\n        }\n        listeners[name].push(listener);\n      },\n\n      // Replays the current user state to all event listeners.\n      replayState: function replayState() {\n        transitionState(currentState, true);\n      },\n\n      // Stop monitoring user activity.\n      stop: function stop() {\n        if (!started) {\n          return false;\n        }\n\n        started = false;\n        currentState = State.Unknown;\n        clearTimeout(inactiveSinceTimeoutId);\n\n        if (options.inactiveOnMouseInactivity) {\n          removeElementListener(window, 'mousemove', flagUserAsActive);\n        }\n\n        if (options.inactiveOnKeyboardInactivity) {\n          removeElementListener(window, 'keypress', flagUserAsActive);\n        }\n\n        if (options.inactiveOnLostFocus) {\n          removeElementListener(window, 'blur', flagUserAsInactive);\n          removeElementListener(window, 'focus', flagUserAsActive);\n        };\n\n        if (options.inactiveOnNoVisibility) {\n          removeElementListener(document, 'visibilitychange', onVisibilityChanged);\n        }\n\n        emit('stopped');\n\n        return true;\n      }\n    };\n  };\n\n  // Expose state enum.\n  Activity.State = {\n    Unknown: 0,\n    Inactive: 1,\n    Active: 2\n  };\n\n  Object.freeze(Activity.State);\n\n  // Method that helps with setting up the user monitor.\n  // Forwards all user monitoring events to the window scope.\n  Activity.detect = function detect(options) {\n    if (Activity._instance) {\n      return false;\n    }\n\n    var instance = Activity._instance = new Activity(options);\n\n    instance.on('inactive', function () {\n      window.dispatchEvent(new CustomEvent('user_inactive'));\n    });\n\n    instance.on('active', function () {\n      window.dispatchEvent(new CustomEvent('user_active'));\n    });\n\n    instance.start();\n\n    return true;\n  };\n\n  // Listen to a event.\n  Activity.on = function on(name, listener) {\n    var instance = Activity._instance;\n\n    if (!instance) {\n      throw new Error('Activity.detect() hasn\\'t been called.');\n    }\n\n    return instance.on(event, handler);\n  };\n\n  // Get activity state.\n  Activity.state = function state() {\n    var instance = Activity._instance;\n\n    if (!instance) {\n      throw new Error('Activity.detect() hasn\\'t been called.');\n    }\n\n    return instance.state();\n  };\n\n  // Replays the current user state to all event listeners.\n  Activity.replayState = function replayState() {\n    var instance = Activity._instance;\n\n    if (!instance) {\n      throw new Error('Activity.detect() hasn\\'t been called.');\n    }\n\n    return instance.replayState();\n  };\n\n  window.Activity = Activity;\n})();\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/activity.js\n ** module id = 0\n ** module chunks = 0 1\n **/"],"sourceRoot":""}